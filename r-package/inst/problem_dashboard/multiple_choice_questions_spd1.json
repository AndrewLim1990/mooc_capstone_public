[{"id": "b1ee7ef06f2b4974a7d4e3cf8b0b5b63", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "If you see #i2.718281828459045 appear in the interaction pane, it means:", "choices": [{"choice": "It's an imaginary number.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Someone just sent a strange tweet.", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "It's a number very close to 2.718281828459045.", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "I thought you said there wouldn't be much math!", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "942f26b3f71546af856a2ad36dad1e91", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which of the following are expressions:", "choices": [{"choice": "sqr", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(+ 2 3)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "+", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(sqrt 2)", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "#i1.4142135623730951", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "1", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": ")", "correct": "false", "choice_id": "\"choice_6\""}]}, {"id": "bbd609b1b4884d20a95bd5bc02909d4e", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which of the following are values:", "choices": [{"choice": "sqr", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(+ 2 3)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "+", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(sqrt 2)", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "#i1.4142135623730951", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "1", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": ")", "correct": "false", "choice_id": "\"choice_6\""}]}, {"id": "52aa2b10b0c642adadc7206270783733", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What would be the result of evaluating the following expression:", "choices": [{"choice": "18", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "e1bc3ed54b5c464fba2fc32ca8015411", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Recall that the average of a set of numbers is the sum of the numbers divided by how many numbers there are.", "choices": [{"choice": "(/ 3 (+ 6.2 -12 4))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(/ (+ -8 6.2) 3)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(/ (+ 4 6.2 -12) 3)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "-0.6", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "37ee9b5e1af643a099e3b93a4701e91d", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Why are we using Beginning Student Language in this course? Select all answers that apply.", "choices": [{"choice": "It is simple to learn, allowing you to focus your attention on the design methods", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "It is commonly used in industry, so you can get a job programming in BSL", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "It forms the core of many other languages, which will help you transfer what you learn to other languages", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "There are so many popular programming languages that no single language will be enough to learn", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "9503e9f8988746098ff45a69d8a3deae", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Consider the following expression:", "choices": [{"choice": "(* (-  4 2) 3)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "*", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(-  4 2)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "-", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_6\""}]}, {"id": "473c595f4cbc44cb95f54a3b2aaaef08", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Consider the following expression:", "choices": [{"choice": "(* (-  4 2) 3)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "*", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(-  4 2)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "-", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_6\""}]}, {"id": "2a0e5509e3ec429a9e0bdfd36495a2aa", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Consider the following expression:", "choices": [{"choice": "(* (-  4 2) 3)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "*", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(-  4 2)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "-", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "4", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": "2", "correct": "true", "choice_id": "\"choice_6\""}]}, {"id": "e06afb12af8946e19e7e117a366991ab", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What is the value of the expression below?", "choices": [{"choice": "\"hello\"", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "\"hel\"", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "\"ell\"", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"el\"", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "\"he\"", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "c8df8c9b1bf741ebadb6537131414e2e", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Will the following produce any errors?", "choices": [{"choice": "Yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "No", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "43c5460626604ec4b105a6ef921803ce", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which primitive is required in the following expression to produce the stop sign image below?", "choices": [{"choice": "above", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "beside", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "overlay", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "append", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4c33c228b407400685188c61ccc29a37", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which image will the following expression produce?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "a859cb4ac6474c169e85ddff5a1d2459", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Assume that the image below shows an entire program file. Why does running the program produce the following error?", "choices": [{"choice": "We didn't define a function named above in the program.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "We didn't include (require 2htdp/image) at the beginning of the program.", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "above does not accept a square as an argument.", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "944169f1cc1541e785272e84b9564e5f", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "We have revised the program now, why are we still getting an error?", "choices": [{"choice": "We still need to define a function named above", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "We need to find the collection \"2htpd\"", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "We misspelled the name of the required module, so we need to replace \"2htpd\" with \"2htdp\"", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "2c66ab6cb72d45f992def4cc055fca8d", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What is result of the <b>first</b> evaluation step?", "choices": [{"choice": "(define FOO (* 2 3))\n(define BAR (* FOO 2))\n\n(* (* 2 3) BAR)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define FOO (* 2 3))\n(define BAR (* FOO 2))\n\n(* 6 BAR)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define FOO (* 2 3))\n(define BAR (* (* 2 3) 2))\n\n(* FOO BAR)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define FOO 6)\n(define BAR (* FOO 2))\n\n(* FOO BAR)", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "a760d25c301a41e1976d0d090c2a950d", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Why should you use function definitions?", "choices": [{"choice": "To be lazy", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "To make the code easier to read", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "To avoid duplicated code", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "All of the above", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "0f1c3dbbf3504afb98046eba1b102fd4", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Suppose we want a function that will give the length of the hypotenuse of any right angle triangle. Which of the following would achieve that?", "choices": [{"choice": "(define (pythag 3 4)\n  (sqrt (+ (sqr 3) (sqr 4))))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(sqrt (+ (sqr a) (sqr b)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define c (sqrt (+ (sqr a) (sqr b))))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (pythag a b)\n  (sqrt (+ (sqr a) (sqr b))))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "893d9713c81c49bd8a68a77523d6baf6", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What should we do to fix the following error:", "choices": [{"choice": "Define i in the program", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Include (require 2htdp/image) at the beginning of the program", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Replace i with img, which is the name of the parameter for this function", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "b6c7fcabe10e4996bdd9eb7cb0df1f98", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Given the function:", "choices": [{"choice": "Replace a and b with (+ 1 1) and 4 everywhere.\n\n\n(define (foo (+ 1 1) 4)\n  (+ (* 3 (+ 1 1))\n     4\n     (* 4 (+ 1 1)))\n\n(foo 2 4)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Replace (foo 2 4) with the body of foo in which we replace all occurrences of a with (+ 1 1), and b with 4.\n\n\n(+ (* 3 2)\n   4\n   (* 4 2))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Evaluate (+ 1 1) and replace it in the function call of foo.\n\n\n(foo 2 4)", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "1dba752ffd6a4720abc00dce2717b01e", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "Replace a and b with 2 and 4 everywhere.\n\n(define (foo 2 4)\n  (+ (* 3 2)\n     4\n     (* 4 2)))\n\n(foo 2 4)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Replace (foo 2 4) with the body of foo in which we replace all occurrences of a with 2, and b with 4.\n\n(+ (* 3 2)\n   4\n   (* 4 2))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Replace (foo 2 4) with the body of foo.\n\n(+ (* 3 a)\n   b\n   (* b a))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "658988be8d3e4c59b297c28e69e40ae6", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "(* 3 2) is replaced with 6 and (* 4 2) is replaced with 8.\n\n(+ 6\n   4\n  8)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(* 4 2) is replaced with 8.\n\n(+ (* 3 2)\n   4\n   8)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(* 3 2) is replaced with 6.\n\n(+ 6\n   4\n   (* 4 2))", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "36c5dcc6715f420f819a86ae09ff223e", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "6 and 4 are added to produce 10.\n\n(+ 10\n   (* 4 2))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(* 4 2) is replaced with 8.\n\n(+ 6\n   4\n   8)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(* 4 2) is replaced with 8 and 4, 6, and 8 are added together.\n\n18", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "8bb32b4c642549fdba6ec5847e7957d7", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "6 and 4 are added to produce 10.\n\n(+ 10\n   8)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "6, 4, and 8 are added to produce 14.\n14", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "6, 4, and 8 are added to produce 18.\n18", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "7a146a869fb3410bab260de571bf4064", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What Apple device competed with the portable CD player?", "choices": [{"choice": "true", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "\"true\"", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"false\"", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "a8cf459ca88e4526971b0a6b8306721f", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What about this one?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "\"true\"", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"false\"", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ef34fec4edca43108684e3d5b47e20e9", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which of the following are predicates? Select all that apply.", "choices": [{"choice": "+", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "=", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "string=?", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "string-append", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "d263fc69f8bd44bc86a7f6ce13ab6b03", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which of the following expressions produces true only when  the width of an image IMG1 is greater than 50 pixels?", "choices": [{"choice": "(> (image-width IMG1 50))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(> (image-width IMG1) 50)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(>= (image-width IMG1) 50)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(> 50 (image-width IMG1))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "818a5b94e5c441f0b8c7545c8019562a", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "How can we fix the following error:", "choices": [{"choice": "Remove the '(' before if", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Add ')' after I2) at the end of the code above", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Add ')' after (image-width I1)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Add ')' after (image-width I2)", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "a4f76a9558b9473ab385575861da1538", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What is the value of the if expression below?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "\"long\"", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"short\"", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "46212af364f646f1b3cc85d8894d91d4", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What is the value of the expression below?", "choices": [{"choice": "true", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "22228db3a73c471f816aa5f817b5c422", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Which comparisons are performed when the expression below is evaluated?", "choices": [{"choice": "Just the <", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Just the >", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The < and the >", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "All three <, >, =", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "b207aa4489424e47915088b0c046dada", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "Given:", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "3ddecaf262bd4be98eba25f8684b58aa", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What is the name of the primitive you would use to produce this image?", "choices": [{"choice": "star", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "polygon", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "radial-star", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "rectangle", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "c495e306d7f7475fb762846ff01772e4", "chapter_name": "1a: Beginning Student Language", "chapter_index": 2, "question": "What does the first argument for the primitive radial-star represent?", "choices": [{"choice": "inner radius", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "outer radius", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "color", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "point count", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "70e394d598cd44c394c56af350da4f2e", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Does a design method (or recipe) help more with hard design problems or easier ones?", "choices": [{"choice": "Hard design problems", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "Easy design problems", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "5d1387a7c1fe4754adbb18f128310ecf", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Where can you find the steps of the HtDF design recipe?", "choices": [{"choice": "In the DrRacket help desk", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "In the starter file", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "By following the Design Recipes tab from the course web site", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "a0fa2ac7a97c4a009e720c6b56b0ccef", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Which of the following stubs is best?", "choices": [{"choice": ";; Pluralize s.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; Produce plural string.", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; Add \"s\".", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; Produce the given string with \"s\" added to the end.", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "9c557e5d32bb4f7c90613548345aa6fd", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Which of the following stubs is best?", "choices": [{"choice": "(define (pluralize str) 0)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (string str) str)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (pluralize str) \"\")", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (longer str) 1)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "8f71e81e86d94b75b983548156ba1932", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Continuing with the given problem, we now have a signature, purpose and stub.", "choices": [{"choice": "(check-expect (pluralize \"cat\") \"s\")", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (pluralize \"cat\") \"cat\")", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (pluralize \"dog\") \"dogs\")", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(check-expect (pluralize \"grass\") \"grasss\")", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "7ad129315e1e4001a943570950656bf8", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Which of the following stubs is best?", "choices": [{"choice": "(string-append \"s\" str)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(string-append str \"s\")", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(string-append str s)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(string-append \"cat\" \"s\")", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "15ce21a46bc5400ca861aac0eaeae742", "chapter_name": "1b: How to Design Functions", "chapter_index": 3, "question": "Why do we run the examples/tests after writing the stub?", "choices": [{"choice": "To check if they produce values of the correct type", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "To check if they are well-formed", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "To see how many tests are failing", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Why not", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ed3d23d8e25346d8b420941e944a681d", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "What is the next step of the evaluation of:", "choices": [{"choice": "(cond [true    \"negative\"]\n      [(= 0 0) \"zero\"]\n      [else    \"positive\"])", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cond [false   \"negative\"]\n      [(= 0 0) \"zero\"]\n      [else    \"positive\"])", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(cond [(= 0 0) \"zero\"]\n      [else    \"positive\"])", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "751a85affc70423f8c3d6873d5673ce4", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "(cond [(= 0 0) \"zero\"]\n      [else    \"positive\"])", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(cond [false \"negative\"]\n      [true  \"zero\"]\n      [else  \"positive\"])", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "\"zero\"", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "8a395259f08e41529237394a05d7dee3", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "(cond [else \"positive\"])", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cond [true \"zero\"]\n      [else \"positive\"])", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "\"zero\"", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "764c7fdb628c4737b26f331b438ff768", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "After the previous step of the evaluation we are left with:", "choices": [{"choice": "(cond [true \"zero\"])", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cond [else \"positive\"])", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "\"zero\"", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "ba3902cda4af4c6eb310fddf359b75c0", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": ";; CourseName is String", "choices": [{"choice": ";; interp. a string", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; interp. a name", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; interp. the name of a course", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "2ca7aeac7b8249debecd2f55c45fbd93", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Complete the following data definition that represents the name of a course by choosing the best answer for each step in the HtDD recipe.", "choices": [{"choice": "(define CN1 \"Apple\")", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define CN1 \"Systematic Program Design\")", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define CN1 \"This is a string\")", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "91d44a2d8c2646fe86e6ca93a321c88f", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Complete the following data definition that represents the name of a course by choosing the best answer for each step in the HtDD recipe.", "choices": [{"choice": "(define (fn-for-course-name cn)\n  (... cn))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-course-name cn)\n  (...))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-course-name cn)\n  \"cn\")", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "314b6cd1fdd049f9ab69f7b201483542", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Complete the following data definition that represents the name of a course by choosing the best answer for each step in the HtDD recipe.", "choices": [{"choice": ";; - atomic non-distinct: course name", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; - atomic non-distinct: String", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": ";; - atomic non-distinct: name", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "05adef1e1d7e4e3fb280a645bc16ef1d", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "You are told that the extension you are working on can only accomodate icons that are at most 30 pixels high, so we would like to design a function that checks if an image has a height of more than 30 pixels.", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "2", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "3e883b1e0f904f3ca756cc640fe28d8e", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": ";; Icon -> Boolean", "choices": [{"choice": "(define (too-tall? i)\n  (if (> (image-height i) 30)\n      true\n      false))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (too-tall? i)\n  (cond [(> (image-height i) 30) true]\n        [else false]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (too-tall? i)\n  (> (image-height i) 30))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (too-tall? i)\n  (> i 30))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "361c3623f6f54d22b74a9a26b5a2be07", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Why are we getting the following error message?", "choices": [{"choice": "The function should use a different name than the stub.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "The stub should be commented out.", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "The check-expects should be commented out.", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "The symbol ? cannot be used in the function name.", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "31db91c2e316448fa3d56eeeac72c35a", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "In the screeshot above, which other part of the function design has an error in it?", "choices": [{"choice": "signature", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "purpose", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "examples/tests", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "function body", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "0db31df1354b4ab497c453d2af67c015", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Integer[2, 6] includes how many numbers?", "choices": [{"choice": "3", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "5", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "fcb11683e3e548beb1941c20ccdbe484", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Do Natural[1, 10] and Number(10, 20] have any numbers in common?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "e5411e57d8d644efb29d3db53d17d6d8", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "You are asked to design a data definition to represent the seasons of the year: winter, spring, summer, and fall.", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "4", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "16ff702f4588443aa03acd2fcddbe7b0", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "How many examples should you have for this data definition? ", "choices": [{"choice": "0", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "464844e9d2b24d63b786fa4a5d64446d", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "We use itemization instead of enumeration when we have:", "choices": [{"choice": "Exactly one subclass", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Two or more subclasses, and they are all atomic distinct", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Two or more subclasses, and at least one is not atomic distinct", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "We can use itemization and enumeration interchangeably", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "98479ea1d21a4a7282431d5c32b9b9e1", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Which is the correct template for this data definition?", "choices": [{"choice": "(define (fn-for-reservation r)\n  (cond [(number? r) (... r)]\n        [else (...)]))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-reservation r)\n  (cond [(string? r)(...)]\n        [else (... r)]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-reservation r)\n  (cond [(<= 1 r 100) (... r)]\n        [else (...)]))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-reservation r)\n  (cond [(string=? r \"standby\") (...)]\n        [else (... r)]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ec44cfc55a9f4f13b387909d09f063e3", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "What template rules did you use? [choose all that apply]", "choices": [{"choice": "one of: 3 cases", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "one of: 2 cases", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "atomic non-distinct: Number[1, 100]", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "atomic non-distinct: Natural[1, 100]", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "atomic distinct: \"standby\"", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "atomic distinct: false", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "f66ff94d525842dbac94fed9ea7ca384", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Consider the following data definition:", "choices": [{"choice": "remove (string? tv) from the first cond question", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "remove (number? tv) from the second cond question", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "remove (string=? tv \"off) from the first cond question", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "remove both (<= 1 tv) and (<= tv 99) from the second cond question", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "reduce the third cond question to else", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "2e7ddaf3aadd4f86a8ce661ab94db723", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Consider the test:", "choices": [{"choice": "The value this test produces is incorrect.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "This test is redundant.", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "The value passed to aisle? by this test is not of type SeatNum.", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "We forgot about it.", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1797d5b161894c158b15144d17511899", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Now consider this other test:", "choices": [{"choice": "The value this test produces is incorrect.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "This test is redundant.", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The value passed to aisle? by this test is not of type SeatNum.", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "We forgot about it.", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "531be756cffd456f84ae9a7a3b0afc52", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Suppose you are asked to design another function called middle? that produces true if the seat is anywhere in the middle of the row (i.e not on the aisle seats). Since this function resembles aisle?, you would like to use some of it:", "choices": [{"choice": "The signature", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "The purpose", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The value produced by the stub", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "The template used", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "The number of check-expects", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "The body of the function", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "bef61a063c6d4d21b8049e5b1d1baab3", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "What is the minimum number of tests you need to design this function?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "4", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "a55e97045a974fa2bf1d3599dced7510", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Suppose after you copy the template from Season and fill it out according to the examples you designed, you notice this error:", "choices": [{"choice": "Comment out the function definition", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Add an extra '(' at the beginning of the function body", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "If the same problem appears in the template body, add an extra '(' to it", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Remove the extra ')' from the function body", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "If the same problem appears in the template body, remove the extra ')' from it", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "2895fcea3ef94e9db3a56d1e11ca90d6", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Consider the problem of designing a function called seat-guaranteed? that consumes a reservation and returns true if the reservation guarantees a seat for dinner in the restaurant.", "choices": [{"choice": ";; Reservation -> Reservation", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; Reservation -> Boolean", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": ";; Natural -> Boolean", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; String -> Boolean", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "722d333a8c63483bb4b2fae121bab32a", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "", "choices": [{"choice": "(check-expect (seat-guaranteed? 0) true)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (seat-guaranteed? 101) false)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (seat-guaranteed? 40) true)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(check-expect (seat-guaranteed? \"standby\") true)", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(check-expect (seat-guaranteed? \"standby\") false)", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "d839da3fb5c546b594b8f19ef63977f0", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Why are we getting the following error?", "choices": [{"choice": "The first cond question should be (and (number? r) (<= 1 r 100)).", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "The first cond question should be (and (string? r) (<= 1 r 100)).", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The second cond question should be (and (number? r) (<= 1 r 100)).", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "The second cond question should be (and (string? r) (<= 1 r 100)).", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "d97b5245bf9e470c96dce11df0cb4b74", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "How many data examples are necessary?", "choices": [{"choice": "1", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "3", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "8f13ba2d53924b91a723d9a81628be05", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "What is the correct template for CarSpeed?", "choices": [{"choice": "(define (fn-for-car-speed cs)\n  (...)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-car-speed cs)\n  (... cs))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-car-speed cs)\n  (if (= cs 0)\n      (...)\n      (... cs)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-car-speed cs)\n  (cond [(= cs 0)(...)]\n        [(= cs 200)(...)]\n        [else (... cs)]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "e1ea357d1a2f4af08aab83747ec85875", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "What is the signature for this function?", "choices": [{"choice": ";; Number -> Boolean", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; Number -> String", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; CarSpeed -> String", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; CarSpeed -> Boolean", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "7e6d6fb7c7864f02a3083e716b6bda20", "chapter_name": "2: How to Design Data", "chapter_index": 4, "question": "Which of the following would not be valid test(s) for this function>", "choices": [{"choice": "(check-expect (speeding? 111) true)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (speeding? 250) true)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (speeding? 0) false)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(check-expect (speeding? 110) false)", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(check-expect (speeding? 200) \"yes\")", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "434830e3bf39441fabd28097d41e5fe8", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "How would the cat behave if <tt>SPEED</tt> was -9?", "choices": [{"choice": "It would move three times faster to the right.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "It would stop moving.", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "It would move to from right to left.", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "It would move down.", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "954884b0c7604333b811b20f4e042632", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Look up the documentation for <tt>place-image</tt>. What happens if <tt>render-cat</tt> is called with a number much larger than the width of <tt>MTS</tt>?", "choices": [{"choice": "An error message will occur.", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "The cat will be rendered far off the screen, and cropped out, leaving MTS.", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "The cat will be redered on the right edge of the screen.", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "MTS will stretch to accommodate the location of the cat.", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "2690ae136e7948348467d2e3bccb6e2f", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Which big-bang options do we need for our simple countdown program? (choose all that apply)", "choices": [{"choice": "on-tick", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "to-draw", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "on-mouse", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "on-key", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "stop-when", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "5b835075a3fe48bc8a2f5e12ad843aa8", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Suppose the following constants have already been defined based on the domain analysis of the countdown program:", "choices": [{"choice": "(define TEXT-COLOUR \"black\")", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define MTS (empty-scene 100 100))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define MTS (empty-scene WIDTH HEIGHT))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define CTR-X (/ WIDTH 2))", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(define CTR-X 50)", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "b2d812c70e7449a9bb80520784350992", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Choose the best types comment for the data definition that will be used as the world state for the countdown program.", "choices": [{"choice": ";; Countdown is Image", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; WS is Natural", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; WS is Countdown", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; Countdown is Natural", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": ";; Countdown is String", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "3715126a896448ab804c2424757ecab8", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Why is it useful to fill in the ... in the stubs of the wish-list entries right away? Choose the best answer.", "choices": [{"choice": "So that we don't forget what type the function is producing", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "So that we can run the program before it is complete", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "So that we remember to come back and finish it later", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "1385c4da86f44dc3a53b3aa955b9d045", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "How many tests do we need for this function?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "2", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ea852dc1316245249747180fcef9f794", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Choose the correct function body for <tt>advance-countdown</tt>:", "choices": [{"choice": "(define (advance-countdown cd)\n  (- 1 cd))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (advance-countdown cd)\n  (- cd 1))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (advance-countdown cd)\n  (if (< cd 0)\n      0\n      (- cd 1)))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (advance-countdown cd)\n  (if (= cd 0)\n      0\n      (- cd 1)))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "95972247ec884bdc85e15bf5b8dcc2d0", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "Choose the correct body for the function <tt>render-countdown</tt>:", "choices": [{"choice": "(define (render-countdown cd)\n  (place-image cd\n               CTR-X\n               CTR-Y\n               MTS))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (render-countdown cd)\n  (place-image (text cd TEXT-SIZE TEXT-COLOUR)\n               CTR-X\n               CTR-Y\n               MTS))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (render-countdown cd)\n  (place-image (text (number->string cd) TEXT-SIZE TEXT-COLOUR)\n               CTR-X\n               CTR-Y\n               MTS))", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "bed83963db6844e5ab8f05e4924a4324", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "How can we find out what the key-event for the left arrow is called? Choose the best answer", "choices": [{"choice": "Guess", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Search on Google for \"left arrow key\"", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Look up on-key in the help desk and scroll up and down", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "You should have memorized all of the key events by now", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "Email Gregor to ask him", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "f94455ffba534d91ae1b9862223b4e2f", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "How many cases do we need in the <tt>cond</tt> expression?", "choices": [{"choice": "No cond expression is needed", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "2", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "6c31e2f87ea7464e8f947a5ed11217c6", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "In order, what are the four arguments to <tt>handle-mouse</tt> in our countdown program?", "choices": [{"choice": "The current Countdown, the x-position of the Countdown, the y-position of the Countdown and a MouseEvent", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "The x-position of the mouse, the y-position of the mouse, a MouseEvent and the current Countdown", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Any WorldState, the width of MTS, the height of MTS and a MouseEvent", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "The current Countdown, the x-position of the mouse, the y-position of the mouse and a MouseEvent", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "c956c2761a174c9cadc73a79eee17344", "chapter_name": "3a: How to Design Worlds", "chapter_index": 5, "question": "What do we need to add to complete this function?", "choices": [{"choice": "Nothing, this function is complete", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Add the cond question [(mouse=? me \"button-up\") 0]", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Add the cond question [(mouse=? me \"button-up\") cd]", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Add the cond question [else cd]", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "be985118d30d4cceaf767271d6bc8774", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "<pre>(define-struct soccer-player (number position))</pre>", "choices": [{"choice": "number", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "soccer-player", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "define-struct", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "position", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "dd8f68778fbf446fb751421140fd1516", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Which of the following is a well-formed <tt>define-struct</tt> expression?", "choices": [{"choice": "(define-struct (company) name employees stock-value)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define-struct (company (name employees stock-value)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define-struct (company) (name employees stock-value))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define-struct company (name employees stock-value))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "fa4f87c5054346aa9639ad233825d334", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Select all operators that are defined when the following define struct expression is run:", "choices": [{"choice": "university?", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "university-city", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "name-university", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "city-university", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "university-name", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "make-university", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": "set-univesity", "correct": "false", "choice_id": "\"choice_6\""}]}, {"id": "2a4fdca1fba34223a99c757d5c83f174", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Given the following define-struct and constructor, what expression will return the value 160?", "choices": [{"choice": "BOB-weight", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(person? BOB)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(person-weight BOB)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(bob-weight)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "65927f28ecbb4fb38a03594fb64c636d", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Which of the following structure definitions is formed correctly and matches the domain analysis in the previous video?", "choices": [{"choice": "(define-struct cow (x y dx))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define-struct (cow x y dx))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define-struct (cow x dy))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define-struct cow (x dx))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "df68660dc42b4f72951c266a5fdfda72", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Choose the best type comment for <tt>Cow</tt>:", "choices": [{"choice": ";; Cow is (make-cow Natural Natural)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; Cow is (make-cow Integer Integer)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; Cow is (make-cow Natural[0, WIDTH] Integer)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": ";; Cow is (make-cow Natural[0, WIDTH] Natrual[0, WIDTH])", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1489261222bb4fa48d41e245d56132d1", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Select the pieces that will complete the main function for cowabunga.", "choices": [{"choice": "(on-tick next-cow)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(to-draw render-cow)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(on-mouse handle-mouse)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(on-key handle-key)", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(stop-when stop-now?)", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "2bc0e276ab744faeb48ffddb93909712", "chapter_name": "3b: Compound Data", "chapter_index": 6, "question": "Select the best Signature, Purpose and Stub for <tt>render-cow</tt>:", "choices": [{"choice": ";; Cow -> Image", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": ";; Cow Image -> Image", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; Cow -> Cow", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "6cc7a917a9ae49769c26916b16570573", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "<tt>(cons (+ 1 1) (cons 1 empty))</tt>", "choices": [{"choice": "3", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(cons 3 empty)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(cons 2 (cons 1 empty))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "eba1614200c7410ca086475f68f26711", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What is the value produced by the expression <tt>(first L1)</tt>?", "choices": [{"choice": "(cons \"Systematic Program Design\" empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons \"Program\" (cons \"Design\" empty))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(cons \"Systematic\" empty)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"Systematic\"", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "\"Design\"", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "9946e225e08c4a69a20e3a03fe8cac08", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What is the value produced by the expression <tt>(rest L1)</tt>?", "choices": [{"choice": "(cons \"Systematic Program Design\" empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons \"Program\" (cons \"Design\" empty))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(cons \"Systematic\" empty)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "\"Systematic\"", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "\"Design\"", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "261bfae908d843c7b303bbaddb533063", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What is the value produced by the expression <tt>(empty? L2)</tt>?", "choices": [{"choice": "(cons 1 empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "true", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "602fde5f78d84e299156d86c903d66e9", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What is the value produced by the expression <tt>(empty? (rest L2))</tt>?", "choices": [{"choice": "(cons 1 empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "true", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "de3e9f9e3d1248ad9a3143ba207ec412", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "\"a\" (cons (string-append \"b\" \"c\") (cons \"d\" empty)))", "choices": [{"choice": "2", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "3", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "5", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "79e34375c4ed4664807b20717516f7eb", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "Is <tt>empty</tt> a ListOfNatural? In other words, does <tt>empty</tt> match the type ListOfNatural?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "79039f7d42944b388db04a990694108a", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "Consider the following partial data definition:", "choices": [{"choice": "(cons 2 empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons 1 empty)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(cons 5 (cons 4 (cons 1 empty)))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1e5ae6b236734c4bb2312426de1ef5be", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What should the base case be?", "choices": [{"choice": "empty", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "true", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "c3383aa1dd414f5b85fd9e3071d2eb99", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What should we use to check if the first element of lon is negative?", "choices": [{"choice": "positive?", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "negative?", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "contains-negative?", "correct": "fakse", "choice_id": "\"choice_2\""}]}, {"id": "5b6928176b5e4c9bacbf629236e370db", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What should we use to check if the first element of lon is negative?", "choices": [{"choice": "We need to design a new function", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "positive?", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "negative?", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "contains-negative?", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "520caef2137b41f886f802f1ca0dff2b", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "Does this type comment have a self-reference?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "83211ae3e8db401fbbd3b38de807cca7", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "In the <tt>contains-negative?</tt> function you designed in an earlier question. Which of these check-expects should appear first?", "choices": [{"choice": "(check-expect (contains-negative? (cons 1 empty)) false)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (contains-negative? empty) false)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (contains-negative? (cons 1 (cons -1.5 empty))) true)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "It doesn't matter which one appears first", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "fef41502e19249b7bc839da89b094b67", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "In the above Data Definition, what is wrong with the template? Choose all answers that apply.", "choices": [{"choice": "It's missing the natural recursion for (first los)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "It's missing the natural recursion for (rest los)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "It's missing the base case", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "It's incorrectly named", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "The base case should be (...) instead of empty", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "9ae96b3057754af090f8fb021f0c0dc3", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "Which of the following shows the correct self-reference arrow(s)?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "00395d0f8fb646bca3669c4656efe1a6", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "Your friend is asking you for some feedback on the design of their function contains-negative?", "choices": [{"choice": "Add a test at least two elements long", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "Don't change anything because all tests pass", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Add the natural recursion as the false answer expression of the if", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "Whatever you do, don't trust the natural recursion!", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "9260b390a63947479990f3edd3021e66", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What should the base case result be?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ab96edfc535f4c8985aa33b0ace39f74", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What is the contribution of the first element?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "itself", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "839774ab5836435d875075506039c993", "chapter_name": "4a: Self-Reference", "chapter_index": 9, "question": "What operation should we use to combine the contribution of the first with the result of the natural recursion?", "choices": [{"choice": "+", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "*", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "if", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "product", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "123db22f3f414c0fa04f09fad3aa4748", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "We have identified one necessary constant for this program:", "choices": [{"choice": "(define TEXT-SIZE 24)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define TEXT-COLOUR \"black\")", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define TEXT-COLOUR \"lightblue\")", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define TEXT \"school-name\")", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(define BAR-WIDTH 30)", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "(define BAR-HEIGHT 40)", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "(define BAR-COLOUR \"black\")", "correct": "false", "choice_id": "\"choice_6\""}, {"choice": "(define BAR-COLOUR \"lightblue\")", "correct": "true", "choice_id": "\"choice_7\""}]}, {"id": "da55891898c44f99b64fb6b7fd15030a", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following is the correct way to draw the reference (R) and self-reference (SR) arrows?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "57fe499ff021446784f08a48efb005b8", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following is the correct template for <tt>ListOfStudent</tt>?", "choices": [{"choice": "(define (fn-for-los los)\n  (cond [(empty? los)(...)]\n        [else\n         (... (first los)\n              (fn-for-los (rest los)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-los los)\n  (cond [(empty? los)(...)]\n        [else\n         (... (fn-for-los (first los))\n              (fn-for-los (rest los)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-los los)\n  (cond [(empty? los)(...)]\n        [else\n         (... (fn-for-student (first los))\n              (fn-for-los (rest los)))]))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-los los)\n  (cond [(empty? los)(...)]\n        [else\n         (... (cons (first los))\n              (fn-for-los (rest los)))]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "ee4b0206d1b94bd1a3573cc02c363197", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which template rule was used to add the call to <tt>fn-for-student?</tt> in the template for <tt>ListOfStudent</tt>?", "choices": [{"choice": "reference", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "self-reference", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "one-of", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "atomic distinct", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "80085526dbcc46ad90ea30d7a7a3fb61", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "What are the correct arrows for this figure?", "choices": [{"choice": "", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "c66c568b90df48b3bb848a3ddbbba356", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "What is the correct template for <tt>foo</tt>?", "choices": [{"choice": "(define (fn-for-foo f)\n        (... (foo-x f)\n             (foo-b f)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-foo f)\n        (... (fn-for-bar (foo-x f))\n             (foo-b f)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-foo f)\n        (... (fn-for-bar (foo-x f))\n             (fn-for-bar (foo-b f))))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-foo f)\n        (... (foo-x f)\n             (fn-for-bar (foo-b f))))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "b3144b072fa04b03b816d337f1407ae0", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following should you work on first when you start re-designing the function <tt>chart</tt>?", "choices": [{"choice": "Modify the function definitions first, and then test it using check-expects", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Revise the examples first, and then use them as a guide to write the function definition", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Convince Eva that the chart looks fine", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "da04580dc3da4a72b4ea035c14a9605e", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Do we need more <tt>check-expects</tt>?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "70a1e891b82949698fdf2043ed7bf32a", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "What is wrong, or could be improved about the following function definition for student-cards?", "choices": [{"choice": "Nothing since all tests pass", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "The base case is wrong", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "A helper function that operates on Student is missing", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "A helper function that operates on ListOfStudent is missing", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "d29214c8e03645d893fff1b091f29175", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following expessions will produce the value \"Orange\"?", "choices": [{"choice": "(first (first (rest L1)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(rest (rest (first L1)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(rest (rest L1))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(first (rest (rest L1)))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "4f2ca907c24847beb4df9ac472d7a475", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following self-referential type comments are well formed (choose all that apply)? ", "choices": [{"choice": ";; ListOne is one of:\n;; - empty\n;; - (cons Natural ListOne)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": ";; ListTwo is one of:\n;; - (cons String ListTwo)\n;; - (cons Natural ListTwo)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; ListThree is one of:\n;; - (cons \"end\" empty)\n;; - (cons String ListThree)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": ";; ListFour is one of:\n;; - (cons Natural ListFour)", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": ";; ListFive is one of:\n;; - empty\n;; - (cons 0 ListFive)\n;; - (cons 1 ListFive)", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "eac5bf78ec9246428fff4b2f869e480b", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which template belongs with ListA?", "choices": [{"choice": "Template 1", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Template 2", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Template 3", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "86854c2e30804000bc66b7379f702130", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "For each list, choose which of the three data definition defined above it is a valid example for (choose all that apply).", "choices": [{"choice": "ListA", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "ListB", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "ListC", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "42d66129bb1d4e0780aef021265b3b68", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following shows the correct way to draw reference arrows for the type <tt>Path</tt>?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "e22978fd9b014a6789d7810a435763f5", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Consider the following Data Definitions:", "choices": [{"choice": "Concert", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "ListOfConcert", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Festival", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "none are correct", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "c19f68e08ae9494aa86ccfe45cec5eb1", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following statements is true?", "choices": [{"choice": "The check-expects are correct and there are enough of them", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "There are enough check-expects, but they are incorrect", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The check-expects are correct, but we need one or more additional ones", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "There are not enough check-expects and they are incorrect", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "91437e3fdfb5463cabaea07255e34afe", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Which of the following function definitions is correct for <tt>festival-schedule</tt>?", "choices": [{"choice": "(define (festival-schedule f)\n  (cons (display-concert (first f))\n        (festival-schedule (rest f))))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (festival-schedule f)\n  (cond [(empty? f) empty]\n        [else \n         (cons (string-append (concert-artist (first f)) \":\" (concert-venue (first f)))\n               (festival-schedule (rest f)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (festival-schedule f)\n  (cond [(empty? f) empty]\n        [else \n         (cons (display-concert (first f))\n               (festival-scheudle (first f)))]))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (festival-schedule f)\n  (cons (string-append (concert-artist (first f)) \":\" (concert-venue (first f)))\n        (festival-schedule (rest f))))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "8d84bc4f152a492a97820ce2ce142fe2", "chapter_name": "4b: Reference", "chapter_index": 10, "question": "Suppose you want to change the definition of festival to have three fields: the name, the headlining concert, and all the other shows in the festival. ", "choices": [{"choice": "fn-for-concert", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "concert-artist", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "empty?", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "festival-headliner", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "fn-for-loc", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "concert-venue", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "festival-name", "correct": "true", "choice_id": "\"choice_6\""}, {"choice": "first", "correct": "false", "choice_id": "\"choice_7\""}, {"choice": "rest", "correct": "false", "choice_id": "\"choice_8\""}, {"choice": "festival-shows", "correct": "true", "choice_id": "\"choice_9\""}]}, {"id": "c8715927f2b740ed8ae0afd98ed62f30", "chapter_name": "5a: Naturals", "chapter_index": 11, "question": "What should go in (1)...?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "904df35f200c4ea29a4077a3b055d6d3", "chapter_name": "5a: Naturals", "chapter_index": 11, "question": "What is the result of <tt>(check-expect (list-from-to 5 5) _____)</tt>?", "choices": [{"choice": "empty", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "0", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(cons 5 empty)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "this call to list-from-to breaks the assumption in the purpose", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "f96cdc00cd034c7ea02b9647319012a9", "chapter_name": "5a: Naturals", "chapter_index": 11, "question": "What should go in the first blank?", "choices": [{"choice": "(zero? n)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(zero? a)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(zero? (- n a))", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "1fc9d815c08a431d8b36f643e94952f6", "chapter_name": "5a: Naturals", "chapter_index": 11, "question": "What should go in the remaining blank?", "choices": [{"choice": "(cons n (list-from-to n a))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons n (list-from-to (sub1 n) a))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(cons n (list-from-to n (sub1 a)))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(cons n (list-from-to (sub1 n) (sub1 a)))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "bca0b412f7f748b5aa66957d4464b20b", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Which of the following is a correct test for <tt>arrange-strings</tt>?", "choices": [{"choice": "(check-expect (arrange-strings (cons \"Sally\" (cons \"Apple\" empty))) BLANK)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (arrange-strings (cons \"Sally\" (cons \"Apple\" empty))) BLANK)\n              (above/align \"left\"\n                           (text \"Sally\" TEXT-SIZE TEXT-COLOR)\n                           (text \"Apple\" TEXT-SIZE TEXT-COLOR)\n                           BLANK))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (arrange-strings (cons \"Sally\" (cons \"Apple\" empty))) BLANK)\n              (above/align \"left\"\n                           (text \"Apple\" TEXT-SIZE TEXT-COLOR)\n                           (text \"Sally\" TEXT-SIZE TEXT-COLOR)\n                           BLANK))", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "3330b9a23cfb4aaca51809c81fbccaa0", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Do we need to add the following base case test to the arrange-strings function design?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "9a09635a17c34cc8940a8ddd526ef979", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Is it good enough to have only this <tt>check-expect</tt> for <tt>arrange-strings</tt>?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "aa5df1eb8d5045b4a75ae6d7b53efb7d", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Which of the following is the correct function definition for arrange strings?", "choices": [{"choice": "(define (arrange-strings los)\n  (layout-strings (sort-strings los)))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (arrange-strings los)\n  (sort-strings (layout-strings los)))", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "73f8e33fa9684e6e8fa910b0d465acf9", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Which of the following is the correct function definition for <tt>layout-strings</tt>?", "choices": [{"choice": "(define (layout-strings los)\n  (cond [(empty? los) BLANK]\n        [else \n         (above (text (first los) TEXT-SIZE TEXT-COLOR)\n                (layout-strings (rest los)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (layout-strings los)\n  (cond [(empty? los) BLANK]\n        [else \n         (above/align \"left\"\n                      (text (first los) TEXT-SIZE TEXT-COLOR)\n                      (layout-strings (rest los)))]))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define (layout-strings los)\n  (cond [(empty? los) BLANK]\n        [else \n         (above/align \"left\"\n                      (text (first los) TEXT-SIZE TEXT-COLOR)\n                      BLANK))]))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "e69f5fefc30c4b2284c17a40d5328cb2", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "(check-expect (sort-strings (cons S1 (cons S2 empty))) _____)", "choices": [{"choice": "(cons S1 (cons S2 empty)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(cons S2 (cons S1 empty)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "94bd0d6bd9c84084988ae4e7d5ae2372", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "(check-expect (sort-strings (cons S3 (cons S1 empty))) _____)", "choices": [{"choice": "(cons S3 (cons S1 empty))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(cons S1 (cons S3 empty))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "empty", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "bf0e5559918e4b96a10045a65639cca6", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Choose the correct function body for <tt>sort-strings</tt>. Assume we wished for a function called <tt>insert-string</tt> that inserts a string in the right place in a sorted list.", "choices": [{"choice": "(define (sort-strings los)\n  (cond [(empty? los) empty]\n        [else\n         (insert-string (first los)\n                        (sort-strings (rest los)))]))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (sort-strings los)\n  (cond [(empty? los) empty]\n        [else\n         (sort-strings (first los)\n                       (insert-string (rest los)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (sort-strings los)\n  (cond [(empty? los) empty]\n        [else\n         (insert-string (first los)\n                        (rest los))]))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "772012383ee24a9381f416b9fb27f94a", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "(check-expect (insert-strings \"Apple\" empty) _____)", "choices": [{"choice": "empty", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "\"Apple\"", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(cons \"Apple\" empty)", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "586414d7433f4cd4ba5076face89ad3a", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "What should go in place of A1?", "choices": [{"choice": "(cons str los)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons (first los)\n      (insert-string str (rest los)))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(insert-string str (rest los))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(insert-string str (rest los))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "d0bf5f97a56c435186387f22d248bef4", "chapter_name": "5b: Helpers", "chapter_index": 12, "question": "Do we need a helper for insert-string due to the domain knowledge shift rule?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "c777beb6781c433e8589eae96e962568", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "What is the value produced by:", "choices": [{"choice": "(list \"a\" (string-append \"b\" \"c\") \"d\")", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(list \"a\" \"bc\" \"d\")", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(list \"a\" \"b\" \"c\" \"d\")", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(list \"abcd\")", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4851e183a1b34a46bdf3013dbaf29c45", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Given these two constant definitions:", "choices": [{"choice": "(list 1 2 3)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(list 1 (list 2 3))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(list 1 2 3 empty)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(list 1 (list 2 3 empty) empty)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1788e4d701494f729b4efc92fedb7519", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Given these two constant definitions:", "choices": [{"choice": "(list 1 2 3)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(list 1 (list 2 3))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(list 1 2 3 empty)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(list 1 (list 2 3 empty) empty)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "9e07a329ae1c4cefa6ff0c68f8a49532", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Given these constant definitions:", "choices": [{"choice": "(list 2 3 4)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(list 4 2 3)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(list 2 3 (list 4))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(list 4 (list 2 3))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4e58e9c7220244ed921c29c8c6a53462", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Why are we getting the following error?", "choices": [{"choice": "We should use (append 2 L1) instead", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "We should use (cons L1 2) instead", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "All the arguments to append must be lists, but 2 is a number", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "DrRacket doesn't like the list notation", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "10f6b4fd0b714eb89b78cc45d883c860", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Is this a valid BST? Specifically, is it a binary tree that satisfies the BST invariants?", "choices": [{"choice": "Yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "No", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "735dd0fd02464f5380b7c469be7a7078", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Is this a valid BST?", "choices": [{"choice": "Yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "No", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "0cd8453d91054b6d9097f8b314ca9caa", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Is this a valid BST?", "choices": [{"choice": "Yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "No", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "a7730ae6d434410490bd9320fa30129b", "chapter_name": "6a: Binary Search Trees", "chapter_index": 13, "question": "Recall the data definition for a BST:", "choices": [{"choice": "(make-node 4 \"d\" \n           (make-node 2 \"b\" \n                      (make-node 3 \"c\" false false) \n                      (make-node 1 \"a\" false false))\n           (make-node 6 \"f\" \n                      false\n                      (make-node 5 \"e\" false false)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(make-node 4 \"d\" \n           (make-node 2 \"b\" \n                      (make-node 1 \"c\" false false) \n                      (make-node 3 \"a\" false false))\n           (make-node 6 \"f\" \n                      (make-node 5 \"e\" false false)\n                      false))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(make-node 4 \"d\" \n           (make-node 6 \"f\" \n                      false\n                      (make-node 5 \"e\" false false)))\n           (make-node 2 \"b\" \n                      (make-node 3 \"c\" false false) \n                      (make-node 1 \"a\" false false))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "829ec43c006749e8b3a52c7a0fdcfecc", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "which arbitrary-arity tree is correctly represented by the data that is the value of D4?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "bfd59ee1663d43e288b754c4a440fa52", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Which of the following is the correct template for person?", "choices": [{"choice": "(define (fn-for-person p)\n  (... (person-name p)\n       (person-gender p)\n       (person-children p)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-person p)\n  (... (fn-for-name (person-name p))\n       (fn-for-gender (person-gender p))\n       (fn-for-lop (person-children p))))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-person p)\n  (... (fn-for-person (person-name p))\n       (fn-for-gender (person-gender p))\n       (fn-for-lop (person-children p))))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-person p)\n  (... (person-name p)\n       (fn-for-gender (person-gender p))\n       (fn-for-lop (person-children p))))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "13f14f2d45da4a57966c59c63d3581bf", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What of the following is the correct template for <tt>ListOfPerson</tt>?", "choices": [{"choice": "(define (fn-for-lop lop)\n  (cond [(empty? lop)(...)]\n        [else\n         (... (first lop)\n              (rest lop))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-lop lop)\n  (cond [(empty? lop)(...)]\n        [else\n         (... (first lop)\n              (fn-for-lop (rest lop)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-lop lop)\n  (cond [(empty? lop)(...)]\n        [else\n         (... (fn-for-lop (first lop))\n              (fn-for-person (rest lop)))]))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-lop lop)\n  (cond [(empty? lop)(...)]\n        [else\n         (... (fn-for-person (first lop))\n              (fn-for-lop (rest lop)))]))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "298182b6432f44bea7f4cda388371791", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "In the following types comments, the reference arrows have been numbered, but the labels are missing:", "choices": [{"choice": "1: SR", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "1: R", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "1: MR", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "2: SR", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "2: R", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "2: MR", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": "3: SR", "correct": "true", "choice_id": "\"choice_6\""}, {"choice": "3: R", "correct": "false", "choice_id": "\"choice_7\""}, {"choice": "3: MR", "correct": "false", "choice_id": "\"choice_8\""}]}, {"id": "edd18275e403485ab9374f80ce708dad", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "In the templates, what should we label arrow(s) #1?", "choices": [{"choice": "R", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "NH", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "SR", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "NR", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "MR", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "NMR", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "eaeccca5fa3c403e9498e88380ffd60e", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "In the templates, what should we label arrow(s) #2?", "choices": [{"choice": "R", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "NH", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "SR", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "NR", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "MR", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "NMR", "correct": "true", "choice_id": "\"choice_5\""}]}, {"id": "0f37a740650949dea26a3125b19009a0", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "In the templates, what should we label arrow(s) #3?", "choices": [{"choice": "R", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "NH", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "SR", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "NR", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "MR", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "NMR", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "15da953a2d204b238a0a3f354815c3b5", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Which of the following functions appears to be part of backtracking search?", "choices": [{"choice": "(define (find-entry--loe e loe)\n  (cond [(empty? e) false]\n        [else\n         (if (not (false? (find-entry--entry e (first loe))))\n             false\n             (find-entry--loe e (rest entry)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (find-entry--loe e loe)\n  (cond [(empty? e) 0]\n        [else\n         (+ (find-entry--entry e (first loe))\n            (find-entry--loe e (rest entry)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (find-entry--loe e loe)\n  (cond [(empty? e) false]\n        [else\n         (if (not (false? (find-entry--entry e (first loe))))\n             (find-entry--entry e (first loe))\n             (find-entry--loe e (rest entry)))]))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (find-entry--loe e loe)\n  (cond [(empty? e) false]\n        [else\n         (cons (find-entry--entry e (first loe))\n               (find-entry--loe e (rest entry)))]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "b8c7915faa3544e3b88fd5db2fdd7c5a", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Consider the following data definition:    ", "choices": [{"choice": "(define BSTA (make-node 6 \"a\" false false))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define BSTB (make-node 6 \"a\" \n                        (make-node 4 \"t\"\n                                   (make-node 3 \"h\" false false)\n                                   (make-node 7 \"j\" false false))                     \n                        (make-node 8 \"v\" false false)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define BSTC (make-node 6 \"a\"\n                        (make-node 4 \"t\"\n                                   (make-node 3 \"h\" false false)\n                                   (make-node 5 \"j\" false false))\n      (make-node 8 \"v\" false false)))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define BSTD false)", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(define BSTE empty)", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "69a6e2db98ab40c5ae0324741cb9659a", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Which of the following images represent valid BSTs, based on the data definition in question 1?", "choices": [{"choice": "", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "bb926eb2519a42208c0d083a6dbd7674", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Of the above trees, which one should you use to organize your data if you want to improve the average time taken to find a specific key? (Note, for trees this small there will be a negligle difference in speed. Imagine trees much larger, but with the same structure as those shown above).", "choices": [{"choice": "the first tree", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "the second tree", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "the third tree", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "the fourth tree", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "3f3e7d5e03a049eb84ec62a983b8426d", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What is the correct functon body for tree-to-list?", "choices": [{"choice": "(define (tree-to-list bt)\n  (cond [(false? bt) empty]\n        [else \n         (cons (tree-to-list (node-l bt))\n               (node-key bt)\n               (tree-to-list (node-r bt)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (tree-to-list bt)\n  (cond [(false? bt) empty]\n        [else \n         (append (tree-to-list (node-l bt))\n                 (list (node-key bt))\n                 (tree-to-list (node-r bt)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (tree-to-list bt)\n  (cond [(false? bt) empty]\n        [else\n         (append (tree-to-list (node-r bt))\n                 (list (node-key bt))\n                 (tree-to-list (node-l bt)))]))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (tree-to-list bt)\n  (cond [(false? bt) empty]\n        [else \n         (append (tree-to-list (node-r bt))\n                 (node-key bt)\n                 (tree-to-list (node-l bt)))]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "b3f9ece5ca604fd69283dcf04665859b", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What types of reference are present in the type Maze?", "choices": [{"choice": "none", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Reference", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Self-Reference", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "Mutual Reference", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4c7359c2baaf4bf598ba50d4507f43c3", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What is the correct template for Maze?", "choices": [{"choice": "(define (fn-for-maze m)\n  (... (junction-left m)\n       (junction-straight m)\n       (junction-right m)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (fn-for-maze m)\n  (cond [(false? m) (...)]\n        [(and (string? m)(string=? \"finish\" m)) (...)]\n        [else\n         (... (junction-left m)\n              (junction-straight m)\n              (junction-right m))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (fn-for-maze m)\n  (... (fn-for-maze (junction-left m))\n       (fn-for-maze (junction-straight m))\n       (fn-for-maze (junction-right m))))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (fn-for-maze m)\n  (cond [(false? m) (...)]\n        [(and (string? m) (string=? \"finish\" m)) (...)]\n        [else\n         (... (fn-for-maze (junction-left m))\n              (fn-for-maze (junction-straight m))\n              (fn-for-maze (junction-right m)))]))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "c192aa8f0fc148998b04dd1cf699e71e", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Consider the following templates:", "choices": [{"choice": "Simple Atomic", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Enumeration", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Itemization", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Compound", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "Arbitrary Sized", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "513f47472967486d9796b0f34442736a", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What type of data is <tt>Position</tt> (along with being part of a mutual reference cycle)?", "choices": [{"choice": "Simple Atomic", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Enumeration", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Itemization", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Compound", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "Arbitrary-Sized", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "acf7317ab37246dabb2ef56cc2f8ccf2", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "What type of data is <tt>ListOfPosition</tt> (along with being part of a mutual reference cycle)?", "choices": [{"choice": "Simple Atomic", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Enumeration", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Itemization", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Compound", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "Arbitrary-Sized", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "c5402861149e448a98e33804a38d3025", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Do we need a structure definition for <tt>Position</tt>?", "choices": [{"choice": "(define-struct position (name title subs))\n;; Position is (make-position String String Position)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define-struct position (name title subs))\n;; Position is (make-position String Title Position)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define-struct position (name title subs))\n;; Position is (make-position String Title ListOfPosition)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define-struct position (name title subs))\n;; Position is (make-position Name Title ListOfPosition)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "fadb32eb2a764a219b14cc3574fd9d60", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Select the correct signature(s), purpose(s) and stub(s)?", "choices": [{"choice": ";; String Position -> Position\n;; if a position with the given name exists within the tree, produce that position, otherwise false\n(define (find--position n t p) false)   ;stub", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; String ListOfPosition -> Boolean\n;; if a position with the given name exists within the list, produce that position, otherwise false\n(define (find--lop n lop) false)   ;stub", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; String Position -> Position or false\n;; if a position with the given name exists within the tree, produce that position, otherwise false\n(define (find--position n p) false)  ;stub\n\n;; String ListOfPosition -> Position or false\n;; if a position with the given name exists within the list, produce that position, otherwise false\n(define (find--lop n lop) false)  ;stub", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; String Position -> Position or false\n;; String ListOfPosition -> Position  or false\n;; if a position with the given name exists within the tree, produce that position, otherwise false\n(define (find--position n p) false)   ;stubs\n(define (find--lop n lop) false)", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "34136c4fab174f72a815f6bbc40e145e", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Which of the following is the correct function definition for find--position?", "choices": [{"choice": "(define (find--position n p)\n  (if (string=? n (position-name p))\n      p\n      false))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (find--position n p)\n  (if (string=? n (position-name p))\n      p\n      (find--lop n (position-subs p))))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define (find--position n p)\n  (if (string=? n p)\n      p\n      (find--lop (position-subs p))))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (find--position n p)\n  (if (string=? n (position-name p))\n      p\n      (find--lop (position-subs p))))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "b5e47f92c525441f8366b7a78395003f", "chapter_name": "6b: Mutual Reference", "chapter_index": 14, "question": "Which of the following countries has the largest population?", "choices": [{"choice": "(define (find--lop n lop)\n  (cond [(empty? lop) false]\n        [else\n         (if (not (false? (find--position n (first lop))))\n             (find--position n (first lop))\n             (find--lop n (rest lop)))]))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (find--lop n lop)\n  (cond [(empty? lop) false]\n        [else\n         (if (false? (find--position n (first lop)))\n             (find--position n (first lop))\n             (find--lop n (rest lop)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (find--lop n lop)\n  (cond [(empty? lop) false]\n        [else\n         (or (find--position n (first lop))\n             (find--lop n (rest lop)))]))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (find--lop n lop)\n  (cond [(empty? lop) false]\n        [else\n         (find--position n (first lop))\n         (find--lop n (rest lop))]))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1bd4d4a87e0a49a48ade4a690ca6421f", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "How many cells will the resulting cross-product table have?", "choices": [{"choice": "2, a 2x1 table", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "4, a 2x2 table", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "6, a 2x3 table", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "9, a 3x3 table", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "cceec989008c4aaf8e05fb7a2d92747e", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (1) be?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "910082d0298445518e6506b7f9436ab8", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (2) be?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4ba7c4cdf2494fff9e519beea9ae46a2", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (3) be?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "7687b9a7cf9e4921b517fdca841e32b7", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (4) be?", "choices": [{"choice": "true", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "9af7d4afb48644b6acbddb565dfc374c", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (5) be?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "2489af56520e4e62928feb4bdce37e81", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the result of case (6) be?", "choices": [{"choice": "true", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(has-path? <left child> (rest path))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(has-path? <right child> (rest path))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "7a7e5070f705413a9055657b79361286", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the question for case (1) be?", "choices": [{"choice": "(empty? p)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(false? bt)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(and (empty? p) (false? bt))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(string=? \"L\" (first p))", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(string=? \"R\" (first p))", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "(node? bt)", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "0ed944ce61a24764bc5002f5f6ff09d4", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the question for case (2) be?", "choices": [{"choice": "(empty? p)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(false? bt)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(and (empty? p) (false? bt))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(string=? \"L\" (first p))", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(string=? \"R\" (first p))", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "(node? bt)", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "4da0714a0f0b4c3c9826b5baf95fcefc", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the question for case (3) be?", "choices": [{"choice": "(empty? p)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(false? bt)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(and (empty? p) (false? bt))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(string=? \"L\" (first p))", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(string=? \"R\" (first p))", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "(node? bt)", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "9903ce212a744ffe9df0f8e657893b22", "chapter_name": "7a: Two One-Of Types", "chapter_index": 15, "question": "What should the question for case (4) be?", "choices": [{"choice": "(empty? p)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(false? bt)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(and (empty? p) (false? bt))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(string=? \"L\" (first p))", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "(string=? \"R\" (first p))", "correct": "true", "choice_id": "\"choice_4\""}, {"choice": "(node? bt)", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "070847a5385340c7a16248eb927c0169", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following are well-formed local expressions?", "choices": [{"choice": "(local []\n  (+ 1 1))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(local [(define b 2)]\n  (* 2 2))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(local [(define a 1)])", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(local [(define b 2)]\n       [(define a 1)]\n  (* a b))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "88c878d6c279486a936e6f551887cfc0", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following scope contours is correct for this program?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "2f7f6782a5bd465eabcdd69e538d1a5d", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following is the correct reference for the circled <tt>a</tt>?", "choices": [{"choice": "", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "bb2d9380fd2e48298598861670af6778", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following is the correct reference for the circled <tt>a</tt>?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "d9ef286ad0134708be7861b0fdf94503", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following is the correct reference for the circled <tt>b</tt>?", "choices": [{"choice": "", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "6055542ce5834c77abe3d11ef3987054", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following is the correct reference for the circled <tt>b</tt>?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "cfb58a170b974617af161174913c1ecd", "chapter_name": "7b: Local", "chapter_index": 16, "question": "What is the result of the first step of the evaluation?", "choices": [{"choice": "(define (foo 2)\n  (local [(define (bar y) (+ 2 y)]\n    (+ 2 (bar (* 2 2)))))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(list\n  (local [(define (bar y) (+ 2 y)]\n    (+ 2 (bar (* 2 2))))\n  (foo 3))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(list (+ 2 (bar (* 2 2)))\n      (foo 3))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "0016856fa10d4ef1864bcc3b0c2e321f", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Remember, when we evaluate a local expression, three things happen in one step.", "choices": [{"choice": "(list (local [(define (bar_0 y) (+ 2 y))]\n        (+ 2 (bar_0 (* 2 2))))\n      (foo 3))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (bar_0 y) (+ 2 y))\n(list (+ 2 (bar_0 (* 2 2)))\n      (foo 3))", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(define (bar_0 y) (+ 2 y))\n(list (local []\n        (+ 2 (bar_0 (* 2 2))))\n      (foo 3))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "f27cd4dad4684ffbb5d73949085f7ee8", "chapter_name": "7b: Local", "chapter_index": 16, "question": "What is the result of the next step of the evaluation?", "choices": [{"choice": "(define (bar_0 (+ 2 y))\n(list (+ 2 (bar_0 4))\n      (foo 3))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (bar_0 (+ 2 y))\n(list (+ 2 (+ 2 4))\n      (foo 3))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (bar_0 (+ 2 y))\n(list (+ 2 (+ 2 (* 2 2)))\n      (foo 3))", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "8bf7871240fd460888618537951a9ff9", "chapter_name": "7b: Local", "chapter_index": 16, "question": "What is the result of the next step of the evaluation", "choices": [{"choice": "(define (bar_0 (+ 2 y))\n(list 8 (foo 3))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (bar_0 (+ 2 y))\n(list (+ 2 6) (foo 3))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (bar_0 (+ 2 y))\n(list (+ 2 (+ 2 4)) (foo 3))", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "a94f1f35e4ce4e69896a3fa97079b381", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which tests should we keep and rename? (choose all that apply)", "choices": [{"choice": "(check-expect (names-under-20--person P1) (list \"N1\"))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (names-under-20--lop empty) empty", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (names-under-20--person P2) (list \"N1\"))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(check-expect (names-under-20--person P4) (list \"N3\" \"N1\"))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "a1e3c55517bd41cf85aea5475497c297", "chapter_name": "7b: Local", "chapter_index": 16, "question": "Which of the following changes did we make when we refactored the names-under-20--person and names-under-20--lop functions to use encapsulation.", "choices": [{"choice": "(a) we changed the behaviour of the program", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(b) we changed the structure of the program", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Both (a) and (b)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "None of the above", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4c6ea106a1414b6b895391b1426c6d19", "chapter_name": "7b: Local", "chapter_index": 16, "question": "What are the advantages of using local for encapsulation? Choose all that apply.", "choices": [{"choice": "We can choose whatever function names we want to define locally", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "We don't have to write base case tests", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "We can hide functions other parts of the program are not interested in", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "The program becomes more efficient", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "bdbe893cd295470ca6a3adc7012bef00", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Which of the following are points of variance between the two functions positive-only and negative-only?:", "choices": [{"choice": "the cond questions", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "the result of the base case", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "the structure of the else case", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "the predicate used to decide if an element remains in the list", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "ae07d0e61a2e4c30b5841e37864bfed6", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "What is the correct function body for <tt>filter2</tt>?", "choices": [{"choice": "(define (filter2 lon)\n  (cond [(empty? lon) empty)]\n        [else\n         (if (p (first lon))\n             (cons (first lon)\n                   (filter2 (rest lon)))\n             (filter2 (rest lon)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (filter2 p lon)\n  (cond [(empty? lon) empty)]\n        [else\n         (if (p (first lon))\n             (cons (first lon)\n                   (filter2 (rest lon)))\n             (filter2 (rest lon)))]))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (filter2 p lon)\n  (cond [(empty? lon) empty)]\n        [else\n         (if (negative? (first lon))\n             (cons (first lon)\n                   (filter2 p (rest lon)))\n             (filter2 p (rest lon)))]))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (filter2 p lon)\n  (cond [(empty? lon) empty)]\n        [else\n         (if (p (first lon))\n             (cons (first lon)\n                   (filter2 p (rest lon)))\n             (filter2 p (rest lon)))]))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "0ce5166290af44a78576820a1f07d8e0", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Now that we have the abstract function <tt>filter2</tt>, what should be the new function body of <tt>positive-only</tt>?", "choices": [{"choice": "(define (positive-only p lon)\n        (filter2 p lon))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (positive-only lon)\n        (filter2 p lon))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (positive-only lon)\n        (filter2 positive? lon))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (positive-only positive? lon)\n        (filter2 positive? lon))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "3b1ebb895c4245a29f1e24ebe5620362", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Select all correct check-expects that for filter2:", "choices": [{"choice": "(check-expect (filter2 empty) empty)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(check-expect (filter2 positive? empty) empty)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(check-expect (negative-only (list 1 -5 5 -1)) (list 1 5))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(check-expect (filter2 negatvie? (list 1 -5 5 -1)) (list 1 5))", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(check-expect (positive-only (list 1 -5 5 -1)) (list -5 -1))", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "(check-expect (filter2 positive? (list 1 -5 5 -1)) (list -5 -1))", "correct": "true", "choice_id": "\"choice_5\""}, {"choice": "(check-expect (filter2 false? (list false true false false true)) (list false false false))", "correct": "true", "choice_id": "\"choice_6\""}]}, {"id": "9cbd69db08a34f6aaa15b14f9ef4493a", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Select the best purpose for <tt>filter2</tt>?", "choices": [{"choice": "produce a list of only the positive or negative elements of lon", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "produce a list of only the positive elements of lon", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "given a list, produce a list of only the elements that satisfy the predicate p", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "produce a list of only the negative elements of lon", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "b8b873b71fea4f7aabb344c708f89e8f", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Which of the following is the correct signature for <tt>andmap2</tt>?", "choices": [{"choice": ";; (X -> Y) (listof X) -> Boolean", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; (X -> Boolean) (listof X) -> Boolean", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": ";; (X -> Y) (listof Y) -> Y", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": ";; (Number -> Boolean) (listof Number) -> Boolean", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "cef23ff92d45443fbbe7436a8b50effb", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Which of the following is the correct function definition for sum?", "choices": [{"choice": "(define (sum lon) (foldr + 0 lon))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define (sum lon) (foldr 0 + lon))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (sum lon) (foldr + lon))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (sum lon) (foldr lon))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "90955db5fadd492e9cd28fa2f8d0cd7d", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Suppose you want tod design a function that consumes (listof Image) and rotates each image by 90 degrees. ", "choices": [{"choice": "filter", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "map", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "build-list", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "foldr", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "andmap", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "ormap", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "9728be96e3a9406cb3cf97a87c4487fb", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Suppose you want tod design a function that consumes (listof String) and combines each string in the list to create a single string. ", "choices": [{"choice": "filter", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "map", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "build-list", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "foldr", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "andmap", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "ormap", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "acc7ed281360426c9f59316d6b068d97", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Suppose you want tod design a function that consumes (listof String) produces a list of the short strings. Assume short here means less than 10 characters long. ", "choices": [{"choice": "filter", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "map", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "build-list", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "foldr", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "andmap", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "ormap", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "2f38bae2800a4bc8b78f674277802193", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Suppose you want tod design a function that consumes a natural number, n, and produces a list of even numbers up to n.", "choices": [{"choice": "filter", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "map", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "build-list", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "foldr", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "andmap", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "ormap", "correct": "false", "choice_id": "\"choice_5\""}]}, {"id": "b47fde25ee1e4f7ab3200a3978848d00", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Suppose you want tod design a function that consumes (listof Number) and produces true if the list contains a negative number", "choices": [{"choice": "filter", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "map", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "build-list", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "foldr", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "andmap", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "ormap", "correct": "true", "choice_id": "\"choice_5\""}]}, {"id": "045eb0a15ed64a96af929c2ad0dc5ced", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Is the function passed to <tt>map</tt> a closure?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "35e68f2cca414fa58b53e0b218b08bba", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Is the function passed to <tt>map</tt> a closure?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "5a88036dcf234de59440b471434163c9", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "Which of the following is the correct function body for juxtapose?", "choices": [{"choice": "(define (juxtapose loi) (foldr beside empty loi))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (juxtapose loi) (foldr empty beside loi))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (juxtapose loi) (foldr beside empty-image loi))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (juxtapose loi) (foldr empty-image beside loi))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "1fb8d38b9d0241ea957c98200dfbdbde", "chapter_name": "8: Abstraction", "chapter_index": 18, "question": "What is the correct function body for <tt>sum-data</tt>?", "choices": [{"choice": "(define (sum-data e) \n  (fold-element + + 0 e)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (sum-data e) \n  (fold-element + + 1 e)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (sum-data e) \n  (local [(define (c1 name data loe) (+ data loe))]\n    (fold-element c1 + 0 e)))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(define (sum-data e) \n  (local [(define (c1 name data loe) (+ data loe))\n          (defone (c2 b e loe) (+ e loe))]\n    (fold-element c1 + 0 e)))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "13fd4b6a1d6f44e6bcb843c6a773ab02", "chapter_name": "9a: Generative Recursion", "chapter_index": 19, "question": "What is the base case?", "choices": [{"choice": "(square s \"ouline\" \"red\")", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(<= s CUTOFF)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(>= s CUTOFF)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(= s CUTOFF)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "fc0dd7f1dca14e91a64bdcccc3b5b90d", "chapter_name": "9a: Generative Recursion", "chapter_index": 19, "question": "What is the reduction step?", "choices": [{"choice": "(/ s 3)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(scarpet (/ s 3))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(square (/ s 3) \"solid\" \"white\")", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "5e25002edfc440a285d2b902fe02f21b", "chapter_name": "9a: Generative Recursion", "chapter_index": 19, "question": "What is the argument that repeated application of the reduction step will eventually reach the base case?", "choices": [{"choice": "Repeated division by 3 will eventually reach the base case", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "As long as CUTOFF is > 0, repeated division by 3 will eventually reach the base case", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "As long as CUTOFF is > 0 and s starts >= 0, repeated division by 3 will eventually reach the base case", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "As long as CUTOFF is >= 0 and s starts > 0, repeated division by 3 will eventually reach the base case", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "47f63036273f48efbc01163960b0595b", "chapter_name": "9b: Search", "chapter_index": 20, "question": "What is the result of <tt>(read-square BD (r-c-&gt;pos 2 1))</tt>?", "choices": [{"choice": "8", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "7", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "B", "correct": "false", "choice_id": "\"choice_2\""}]}, {"id": "20a6b0cb79414bfc87ea1a1403fb89ec", "chapter_name": "9b: Search", "chapter_index": 20, "question": "What is the result of <tt>(fill-square BD (r-c-&gt;pos 2 2) 1)</tt>?", "choices": [{"choice": "(list B B 5 3 B B B B B\n      8 1 B B B B B 2 B\n      B 7 B B 1 B 5 B B\n      4 B B B B 5 3 B B\n      B 1 B B 7 B B B 6\n      B B 3 2 B B B 8 B\n      B 6 B 5 B B B B 9\n      B B 4 B B B B 3 B\n      B B B B B 9 7 B B)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(list B B 5 3 B B B B B\n      8 B B B B B B 2 B\n      B 7 1 B 1 B 5 B B\n      4 B B B B 5 3 B B\n      B 1 B B 7 B B B 6\n      B B 3 2 B B B 8 B\n      B 6 B 5 B B B B 9\n      B B 4 B B B B 3 B\n      B B B B B 9 7 B B)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(list 1 B 5 3 B B B B B\n      8 B B B B B B 2 B\n      B 7 B B 1 B 5 B B\n      4 B B B B 5 3 B B\n      B 1 B B 7 B B B 6\n      B B 3 2 B B B 8 B\n      B 6 B 5 B B B B 9\n      B B 4 B B B B 3 B\n      B B B B B 9 7 B B)", "correct": "true", "choice_id": "\"choice_2\""}]}, {"id": "3b30bfec552f48edb338fec9c98702e4", "chapter_name": "9b: Search", "chapter_index": 20, "question": "Consider the template for a Tic Tac Toe game solver:", "choices": [{"choice": "Generative recursion", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "Arbitrary-arity tree", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "Backtracking search", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Island life Mai Tai Mix", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "d838651c5cac4ec1aa499e1b6aeebc55", "chapter_name": "9b: Search", "chapter_index": 20, "question": "What should go in the ... in the template for the solved? function?", "choices": [{"choice": "boolean?", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "number?", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "true", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "0", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "3f18b8486ff74f688d748c6253cd5fd4", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Below are the signatues,purposes and stubs for several functions. ", "choices": [{"choice": ";; (listof String) -> (listof String)\n;; produce a list of only those strings that are already in alphabetical order\n(define (alphabetical-only los) false)", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": ";; (listof Number) -> (listof Number)\n;; produce a list of only the numbers in th list greater than 5\n(define (greater-than-five lon) lon)", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": ";; (listof Natural) -> (listof Image)\n;; produce a list of alternating black and white squares of size corresponding with the numbers in the list\n(define (black-white-squares lon) empty)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": ";; (listof Image) -> Image\n;; produce a single image of all images in the list side by side\n;; (define (images-beside loi) empty-image)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "88010ae312b14057a15efe8a5a5d7fe4", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Does <tt>number-list</tt> require a context-preserving accumulator?", "choices": [{"choice": "no, we can complete the design of number-list using a standard list template", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "yes, we need to keep track of the previous element of the list", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "yes, we need to keep track of the current element's position in the list", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "yes, we need to keep track of the colon and space", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "e80133880b414ff48226f404b9bc0a70", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "You start the process of adding an accumulator, and here is what you have so far:", "choices": [{"choice": ";; (number-list (list \"first\" \"second\" \"third\") \"1: \")", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": ";; (number-list (list \"first\" \"second\" \"third\") 1)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": ";; (number-list (list \"second\" \"third\") 2)", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": ";; (number-list (list \"1: first\" \"second\" \"third\") \"2: \")", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": ";; (number-list empty 0)", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": ";; (number-list (list \"third\") 3)", "correct": "true", "choice_id": "\"choice_5\""}]}, {"id": "1aba4680a8264184b4fd47c8b597b5d4", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "What should go in the base case, after <tt>(empty? lon)</tt>?", "choices": [{"choice": "\"0:\"", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "empty", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "0", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "false", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "9a6ec10985fa4b20820e191bcad3f102", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "How should we initialize the accumulator in the trampoline call?", "choices": [{"choice": "(number-list lon0 0)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(number-list lon0 1)", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(number-list lon0 \"0: \")", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(number-list lon0 \"1: \")", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "4182ffb2f20d492a930e1fb67cfb9cd6", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "How should we update the accumulator in the recursive call?", "choices": [{"choice": "(number-list (rest lon) acc)", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(number-list (rest lon) (add1 acc))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(number-list (rest lon) (sub1 acc))", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "(number-list (rest lon) 0)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "bdd3982049384b83b54f02d6642156b2", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "How should we combine <tt>acc</tt>, <tt>(first lon)</tt> and <tt>(number-list (rest lon) (add1 acc))</tt>?", "choices": [{"choice": "(cons acc (first lon) (number-list (rest lon) (add1 acc)))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(cons (string-append acc (first lon)) (number-list (rest lon) (add1 acc)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(cons (string-append (number->string acc) (first lon)) (number-list (rest lon) (add1 acc)))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(cons (string-append (number->string acc) \": \" (first lon)) (number-list (rest lon) (add1 acc)))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "997d175f95934ff584e9e085a6fd0890", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "What should be the type of the accumulator in <tt>skipn</tt>?", "choices": [{"choice": "Number", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Boolean", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "String", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "Natural", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "93a913dd547249908e8eef2bfae82e72", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is the function <tt>baz</tt> in tail position?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "1e3d11915ae6448c82f206e95fc781df", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is the function <tt>bar</tt> in tail position?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "95292576c8fb4e53bce216eb6fb904cf", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>(bar? a)</tt> in tail position?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "e161e1eb2922459fbb9aa5e9de83dbf3", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>(baz a)</tt> in tail position?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "795081c611b24522b6780c2364edd3f4", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>(bumble a)</tt> in tail position?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "1b12060cf1ee40c68763436c160d9d0f", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>(ringette? a)</tt> in tail position? ", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "740f4619aa464bbeba983f16ceceab7b", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>(ring a)</tt> in tail position? ", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "4f5d48296d024a57b5ee79f1c798ca74", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>and</tt> in tail position?", "choices": [{"choice": "yes", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "false", "choice_id": "\"choice_1\""}]}, {"id": "70cf17e6cdf94d2d90bb54801507411f", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is <tt>positive?</tt> in tail position?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "9162d0ea0add4b0ab429dd2c1f6a6411", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Is the recursive call <tt>all-positive?</tt> in tail position?", "choices": [{"choice": "yes", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "no", "correct": "true", "choice_id": "\"choice_1\""}]}, {"id": "dac0d3cc45674c38aba82433b0a531c5", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "What type of accumulator will we need to make the function tail recursive?", "choices": [{"choice": "We don't need an accumulator - the function is already tail recursive", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "Number; the previous number in the list", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "Number; the product of the elements seen so far", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "Number; the current position in the list", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "0bccbba128a743d094855187c3fd952c", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Which is the correct function body for the tail recursive version of <tt>product</tt>?", "choices": [{"choice": "(define (product lon)\n  (cond [(empty? lon) 1]\n        [else\n         (* (first lon)\n            (product (rest lon)))]))", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "(define (product lon0)\n  ;; acc: Number; product of the numbers seen so far\n  (local [(define (product lon acc)\n            (cond [(empty? lon) 1]\n                  [else\n                   (* (first lon)\n                      (product (rest lon) acc))]))]\n    (product lon0 1)))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define (product lon0)\n  ;; acc: Number; product of the numbers seen so far\n  (local [(define (product lon acc)\n            (cond [(empty? lon) 0]\n                  [else\n                   (product (rest lon) (* (first lon) acc))]))]\n    (product lon0 1)))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define (product lon0)\n  ;; acc: Number; product of the numbers seen so far\n  (local [(define (product lon acc)\n            (cond [(empty? lon) acc]\n                  [else\n                   (product (rest lon) (* (first lon) acc))]))]\n    (product lon0 1)))", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "5d32efbb710942ab96647666fa24802b", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Here is the template for Wizard, in which we have begun the process of adding a worklist accumulator called parent-house. In some of the positions numbered 1-11, we need to add parent-house. In others, we need to add (... parent-house), and some do not need an accumulator at all. ", "choices": [{"choice": "1", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "3", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "4", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "5", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "7", "correct": "true", "choice_id": "\"choice_6\""}, {"choice": "8", "correct": "true", "choice_id": "\"choice_7\""}, {"choice": "9", "correct": "true", "choice_id": "\"choice_8\""}, {"choice": "10", "correct": "false", "choice_id": "\"choice_9\""}, {"choice": "11", "correct": "false", "choice_id": "\"choice_10\""}]}, {"id": "77cf87f35be142a884619991eb4b22cc", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "Which positions should have (... parent-house)?", "choices": [{"choice": "1", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "2", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "3", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "4", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "5", "correct": "false", "choice_id": "\"choice_4\""}, {"choice": "6", "correct": "false", "choice_id": "\"choice_5\""}, {"choice": "7", "correct": "false", "choice_id": "\"choice_6\""}, {"choice": "8", "correct": "false", "choice_id": "\"choice_7\""}, {"choice": "9", "correct": "false", "choice_id": "\"choice_8\""}, {"choice": "10", "correct": "true", "choice_id": "\"choice_9\""}, {"choice": "11", "correct": "true", "choice_id": "\"choice_10\""}]}, {"id": "58363d35ddf543918137550af002a563", "chapter_name": "10: Accumulators", "chapter_index": 21, "question": "What is the correct Type and Invariant for our accumulator, <tt>parent-house</tt>?", "choices": [{"choice": "Natural; the number of houses the parent owns", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "String; the house the current wizard's parent was in", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "String; the house the current wizard is in", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "Natural; the number of houses at Hogwartz", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "e49998e5d0a944659a6747c3857441b5", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "Which of the following correctly represents H3 as shown above?", "choices": [{"choice": "(define H3\n  (shared ((-0- (make-room \"A\" (list (make-room \"B\" (list (make-room \"C\" (list -0-))))))))\n    -0-))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define H3\n  (shared ((-0- (make-room \"A\" (list (make-room \"C\" (list (make-room \"B\" (list -0-))))))))\n    -0-))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define H3\n  (shared ((-0- (make-room \"A\" (list -0- (make-room \"B\" (list (make-room \"C\" (list -0-))))))))\n    -0-))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define H3\n  (shared ((-0- (make-room \"A\" (list (make-room \"B\" (list (make-room \"C\" (list (make-room \"A\" empty)))))))))\n    -0-))", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "0542711104df464fab2d05a847c75398", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "Which of the following images correctly displays the data above?", "choices": [{"choice": "", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "c4e7d79375614562829901212018774a", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "Which of the following data examples represent the graph shown above (select all that apply)?", "choices": [{"choice": "(define H4\n  (shared ((-0- (make-room \"A\" (list (make-room \"B\" (list (make-room \"C\" (list (make-room \"D\" (list -0-))))))))))\n      -0-))", "correct": "true", "choice_id": "\"choice_0\""}, {"choice": "(define H4\n  (shared ((-A- (make-room \"A\" (list -D-)))\n           (-B- (make-room \"B\" (list -A-)))\n           (-C- (make-room \"C\" (list -B-)))\n           (-D- (make-room \"D\" (list -C-))))\n    -A-))", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(define H4\n  (shared ((-0- (make-room \"A\" (list (make-room \"D\" (list (make-room \"C\" (list (make-room \"B\" (list -0-))))))))))\n      -0-))", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(define H4\n  (shared ((-A- (make-room \"A\" (list -B-)))\n           (-B- (make-room \"B\" (list -C-)))\n           (-C- (make-room \"C\" (list -D-)))\n           (-D- (make-room \"D\" (list -A-))))\n    -A-))", "correct": "true", "choice_id": "\"choice_3\""}, {"choice": "(define H4\n  (shared ((-0- (make-room \"A\" (list -1-)))\n           (-1- (make-room \"B\" (list -2-)))\n           (-2- (make-room \"C\" (list -3-)))\n           (-3- (make-room \"D\" (list -0-))))\n    -0-))", "correct": "false", "choice_id": "\"choice_4\""}]}, {"id": "052a426771864a699b13b6f6fcbb9fec", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "What would be the effect of switching the order of <tt>(append (room-exits r) todo)</tt> to <tt>(append todo (room-exits)</tt>?", "choices": [{"choice": "The template will no longer be tail recursive", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "The template will no longer avoid cycles", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "The template will visit the rooms in a different order", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "The template will no longer visit all the rooms", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "baa7ffe14dca4286b251e35191b00969", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "You are asked to write a function that produces the number of rooms reachable from a given room, including that room itself. You decide that you need an additional result-so-far accumulator to complete this function, and add it to the template like this (tests have been omitted to save space):", "choices": [{"choice": "Nope! Looks good", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "We need to add rsf after r0 in the first line", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "We need to initialize rsf in the trampoline", "correct": "true", "choice_id": "\"choice_2\""}, {"choice": "We only need rsf in fn-for-room not fn-for-lor", "correct": "false", "choice_id": "\"choice_3\""}, {"choice": "We need a comment about the type and invariant of rsf", "correct": "true", "choice_id": "\"choice_4\""}]}, {"id": "53a6b61d16f94ebcbdd413a86b60820f", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "What should replace <tt>(... rsf)</tt> in position 1?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "rsf", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(sub1 rsf)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(add1 rsf)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "95f87bbf713d4bdf8d3babef8cf97523", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "What should replace <tt>(... rsf)</tt> in position 2?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "rsf", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "(sub1 rsf)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(add1 rsf)", "correct": "true", "choice_id": "\"choice_3\""}]}, {"id": "a478f56dae8342908091d06af36083f1", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "What should replace <tt>(... rsf)</tt> in position 3?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "rsf", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(sub1 rsf)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(add1 rsf)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "9822a8d6ba9a4cec83d8f88b29eca336", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "What should replace <tt>(... rsf)</tt> in position 4?", "choices": [{"choice": "0", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "rsf", "correct": "true", "choice_id": "\"choice_1\""}, {"choice": "(sub1 rsf)", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "(add1 rsf)", "correct": "false", "choice_id": "\"choice_3\""}]}, {"id": "69cc8691b54c43fba19895b802b83d0f", "chapter_name": "11: Graphs", "chapter_index": 22, "question": "How could you have designed num rooms without an extra accumulator?", "choices": [{"choice": "produce todo at the end", "correct": "false", "choice_id": "\"choice_0\""}, {"choice": "produce visited at the end", "correct": "false", "choice_id": "\"choice_1\""}, {"choice": "produce (lenth todo) at the end", "correct": "false", "choice_id": "\"choice_2\""}, {"choice": "produce (length visited) at the end", "correct": "true", "choice_id": "\"choice_3\""}]}]